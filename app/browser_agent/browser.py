from typing import Protocol, List, Literal, Dict, Optional


class Browser(Protocol):
    """Defines the interface for browser automation."""

    @property
    def dimensions(self) -> tuple[int, int]: ...

    def screenshot(self) -> str: ...

    def click(self, x: int, y: int, button: str = "left") -> None: ...
    
    def click_selector(self, selector: str, button: str = "left") -> None: ...

    def double_click(self, x: int, y: int) -> None: ...

    def scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> None: ...

    def type(self, text: str) -> None: ...

    def wait(self, ms: int = 1000) -> None: ...
    
    def wait_for_selector(self, selector: str, timeout: Optional[int] = None) -> bool: ...

    def move(self, x: int, y: int) -> None: ...

    def keypress(self, keys: List[str]) -> None: ...

    def drag(self, path: List[Dict[str, int]]) -> None: ...

    def get_current_url(self) -> str: ...

    def goto(self, url: str) -> None: ...

    def back(self) -> None: ...

    def forward(self) -> None: ...
    
    def get_page_html(self) -> str: ...
    
    def get_element_info(self, selector: str) -> dict: ...
    
    def fill_form(self, selector: str, value: str) -> None: ...
    
    def extract_text(self, selector: str = "body") -> str: ...
    
    def open_new_tab(self, url: str = "") -> None: ...
    
    def switch_tab(self, tab_index: int) -> None: ...
